a model for type checkingmost current programming languages treat computationover different classes of objects e.g numbers strings labels and functions for correctcompilation and execution the following question then arises is a program properly constructed so thatits operations and operands are compatible the activity of answering this question is usually calledtype checking this paper attempts to isolate the notion of type checking and presents a partialsolution to the type checking problem based on the notions of abstraction and application of functions in particular a program is mapped into an expression within a decidable subset of the lambda calculus whichcharacterizes the type relations within the program and eliminates all other information the determinationof the type-wise correctness or incorrectness of the program is resolved by reducing its correspondinglambda calculus expression to one of two normal forms the constant correct for a type-wise correctprogram or the constant error an application to type checking in algol 60 is made and the attendantproblems faced for any notion of type checking are discussed.cacm november 1972ledgard h f.type checking types lambda calculus models forprogramming languages syntax semantics compiler writing language implementation formal definition4.12 4.22 5.2 5.21 5.23ca721104 jb january 27 1978 2:30 pm2265 5 22652265 5 22652265 5 2265