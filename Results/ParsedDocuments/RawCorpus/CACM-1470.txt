the structure of programming languagesthe following are identified as major componentsof every programming language 1 the elementary program statement 2 mechanisms for linking elementarystatements together 3 the means by which a program can obtain data inputs several alternativeforms of each of these components are described compared and evaluated many examples frequently fromlist processing languages illustrate the forms described elementary program statements usually takethe form of commands requirements or implicit specifications a command is an imperative statementthat commands the action to be taken a requirement describes the effect to be achieved without saying anythingabout the actions to be taken an implicit specification is similar to a requirement but the programmermust understand what actions will be taken to achieve the desired effect subroutines may be enteredexplicitly by execute call or by function composition explicitly called subroutines generallyrequire special linkage conventions an execute subroutine call is syntactically indistinguishable froma basic instruction of the programming language function composition is a convenient alternative tothe explicit call the three principal ways of getting inputs for routines are 1 by referring tothe data itself 2 by referring to the data by a name and 3 by referring to it implicitly by meansof variables or functions names are useful entry points into permanent data structures but canbe error-causing distractions in other contexts the author discusses advantages disadvantages and factorsinfluencing the choice of a form of component for a language he concludes by suggesting the evolutionof programming languages toward one which will permit all the most convenient ways of structuringprograms organizing systems and referencing data.cacm march 1966raphael b.ca660302 jb march 3 1978 2:20 pm1470 5 14701470 5 14701470 5 1470